#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

const int DHT_PIN = 15;
#define DHTTYPE DHT11
const char *ssid = "wifi";           // WiFi ssid
const char *password = "alfan12345";
const char *mqtt_server = "test.mosquitto.org";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;

DHT dht(DHT_PIN, DHTTYPE);

const int LED_1_PIN = 2; // Connect LED 1 to pin 2
const int LED_2_PIN = 4; // Connect LED 2 to pin 3

void setup_wifi()
{
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char *topic, byte *payload, unsigned int length)
{
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++)
  {
    Serial.print((char)payload[i]);
  }
}

void reconnect()
{
  while (!client.connected())
  {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str()))
    {
      Serial.println("Connected");
      client.publish("/ThinkIOT/Publish", "Welcome");
      client.subscribe("/ThinkIOT/Subscribe");
    }
    else
    {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup()
{
  pinMode(LED_1_PIN, OUTPUT);
  pinMode(LED_2_PIN, OUTPUT);

  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  dht.begin();
}

void loop()
{
  if (!client.connected())
  {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 2000)
  {
    lastMsg = now;
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();

    String tempStr = String(temperature, 2);
    client.publish("/Thinkitive/temp", tempStr.c_str());
    String humStr = String(humidity, 1);
    client.publish("/Thinkitive/hum", humStr.c_str());

    Serial.print("Temperature: ");
    Serial.println(tempStr);
    Serial.print("Humidity: ");
    Serial.println(humStr);

    // Control LEDs based on temperature conditions
    if (temperature <= 31)
    {
      analogWrite(LED_1_PIN, 1); // Turn on LED 1
      analogWrite(LED_2_PIN, 0);  // Turn off LED 2
    }
    if (temperature > 32 && temperature < 35)
    {
      analogWrite(LED_1_PIN, 0);  // Turn off LED 1
      analogWrite(LED_2_PIN, 1); // Turn on LED 2
    }
    else
    {
      analogWrite(LED_1_PIN, 0); // Turn off LED 1
      analogWrite(LED_2_PIN, 0); // Turn off LED 2
    }
  }
}
